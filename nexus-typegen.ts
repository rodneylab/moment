/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './src/context';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddressInput: {
    // input type
    city: string; // String!
    country: string; // String!
    locality: string; // String!
    postalCode: string; // String!
    streetAddress: string; // String!
  };
  CreateExhibitionInput: {
    // input type
    bodyText?: string | null; // String
    description: string; // String!
    end: string; // String!
    freeEntry: boolean; // Boolean!
    gallery: string; // String!
    hashtags: string[]; // [String!]!
    inPerson: boolean; // Boolean!
    name: string; // String!
    online: boolean; // Boolean!
    start: string; // String!
    summaryText: string; // String!
    url?: string | null; // String
  };
  CreateGalleryInput: {
    // input type
    name: string; // String!
    nearestTubes: string[]; // [String!]!
    openStreetMapUrl?: string | null; // String
    openingHours: NexusGenInputs['OpeningHoursInput']; // OpeningHoursInput!
    postalAddress: NexusGenInputs['AddressInput']; // AddressInput!
    slug: string; // String!
    website: string; // String!
  };
  CreatePhotographerInput: {
    // input type
    firstName?: string | null; // String
    lastName?: string | null; // String
    otherNames?: string | null; // String
    slug: string; // String!
    website?: string | null; // String
  };
  CreateTubeStationInput: {
    // input type
    name: string; // String!
    slug: string; // String!
  };
  FidoU2fRegisterInput: {
    // input type
    label: string; // String!
    registerData: NexusGenInputs['FidoU2fRegistrationDataInput']; // FidoU2fRegistrationDataInput!
  };
  FidoU2fRegistrationDataInput: {
    // input type
    clientData: string; // String!
    registrationData: string; // String!
    version: string; // String!
  };
  FidoU2fSignResponseInput: {
    // input type
    clientData: string; // String!
    keyHandle: string; // String!
    signatureData: string; // String!
  };
  LoginInput: {
    // input type
    password: string; // String!
    username: string; // String!
  };
  OpeningHoursInput: {
    // input type
    openingHoursRanges: NexusGenInputs['OpeningHoursRangeInput'][]; // [OpeningHoursRangeInput!]!
  };
  OpeningHoursRangeInput: {
    // input type
    closingTime: string; // String!
    endDay: number; // Int!
    openingTime: string; // String!
    startDay: number; // Int!
  };
  UpdateExhibitionInput: {
    // input type
    addPhotographers: string[]; // [String!]!
    bodyText?: string | null; // String
    id: string; // String!
    name?: string | null; // String
    removePhotographers: string[]; // [String!]!
    summaryText?: string | null; // String
    url?: string | null; // String
  };
  UpdateGalleryInput: {
    // input type
    addNearestTubes?: string[] | null; // [String!]
    id: string; // String!
    name?: string | null; // String
    openStreetMapUrl?: string | null; // String
    postalAddress?: NexusGenInputs['AddressInput'] | null; // AddressInput
    removeNearestTubes?: string[] | null; // [String!]
    replacementByAppointmentOpeningHours?: NexusGenInputs['OpeningHoursInput'] | null; // OpeningHoursInput
    replacementOpeningHours?: NexusGenInputs['OpeningHoursInput'] | null; // OpeningHoursInput
    slug?: string | null; // String
    website?: string | null; // String
  };
  UpdateTubeStationInput: {
    // input type
    id: string; // String!
    name?: string | null; // String
    slug?: string | null; // String
  };
  UsernameEmailPasswordInput: {
    // input type
    email: string; // String!
    password: string; // String!
    username: string; // String!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: Date;
}

export interface NexusGenObjects {
  CreateExhibitionResponse: {
    // root type
    errors?: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    exhibition?: NexusGenRootTypes['Exhibition'] | null; // Exhibition
  };
  CreateGalleryResponse: {
    // root type
    errors?: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    gallery?: NexusGenRootTypes['Gallery'] | null; // Gallery
  };
  CreatePhotographerResponse: {
    // root type
    errors?: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    photographer?: NexusGenRootTypes['Photographer'] | null; // Photographer
  };
  CreateTubeStationResponse: {
    // root type
    errors?: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    tubeStation?: NexusGenRootTypes['TubeStation'] | null; // TubeStation
  };
  DuoAuthDevice: {
    // root type
    capabilities?: Array<string | null> | null; // [String]
    device?: string | null; // String
    type?: string | null; // String
  };
  DuoEnrollResponse: {
    // root type
    activationCode?: string | null; // String
    error?: string | null; // String
    qrCode?: string | null; // String
  };
  DuoEnrollStatusResponse: {
    // root type
    error?: string | null; // String
    result?: string | null; // String
  };
  DuoPreauthResponse: {
    // root type
    devices?: NexusGenRootTypes['DuoAuthDevice'][] | null; // [DuoAuthDevice!]
    error?: string | null; // String
    result?: string | null; // String
  };
  Exhibition: {
    // root type
    bodyText?: string | null; // String
    createdAt?: string | null; // String
    description?: string | null; // String
    end?: string | null; // String
    freeEntry?: boolean | null; // Boolean
    gallery?: NexusGenRootTypes['Gallery'] | null; // Gallery
    hashtags: string[]; // [String!]!
    id: string; // String!
    inPerson?: boolean | null; // Boolean
    name: string; // String!
    online?: boolean | null; // Boolean
    photographers?: Array<NexusGenRootTypes['Photographer'] | null> | null; // [Photographer]
    start?: string | null; // String
    summaryText?: string | null; // String
    updatedAt?: string | null; // String
    url?: string | null; // String
  };
  ExhibitionQueryResponse: {
    // root type
    error?: string | null; // String
    exhibition?: NexusGenRootTypes['Exhibition'] | null; // Exhibition
  };
  FidoU2fAuthenticateRequest: {
    // root type
    error?: string | null; // String
    labels?: Array<string | null> | null; // [String]
    signRequests?: NexusGenRootTypes['FidoU2fRequest'][] | null; // [FidoU2fRequest!]
  };
  FidoU2fRegisterRequest: {
    // root type
    appId?: string | null; // String
    challenge?: string | null; // String
    version?: string | null; // String
  };
  FidoU2fRequest: {
    // root type
    appId: string; // String!
    challenge: string; // String!
    keyHandle?: string | null; // String
    version: string; // String!
  };
  FieldError: {
    // root type
    field: string; // String!
    message: string; // String!
  };
  Gallery: {
    // root type
    address?: string | null; // String
    byAppointmentOpeningHours?: NexusGenRootTypes['OpeningHours'] | null; // OpeningHours
    byAppointmentOpeningTimes?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    exhibitions?: NexusGenRootTypes['Exhibition'][] | null; // [Exhibition!]
    id: string; // String!
    location?: NexusGenRootTypes['Location'] | null; // Location
    name: string; // String!
    nearestTubes?: NexusGenRootTypes['TubeStation'][] | null; // [TubeStation!]
    openStreetMap?: string | null; // String
    openingHours?: NexusGenRootTypes['OpeningHours'] | null; // OpeningHours
    openingTimes?: string | null; // String
    postalAddress?: NexusGenRootTypes['PostalAddress'] | null; // PostalAddress
    slug: string; // String!
    tubes?: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
    website?: string | null; // String
    websiteUrl?: string | null; // String
  };
  GalleryQueryResponse: {
    // root type
    error?: string | null; // String
    gallery?: NexusGenRootTypes['Gallery'] | null; // Gallery
  };
  Location: {
    // root type
    latitude: number; // Float!
    longitude: number; // Float!
  };
  Mutation: {};
  OpeningHours: {
    // root type
    openingHoursRanges?: NexusGenRootTypes['OpeningHoursRange'][] | null; // [OpeningHoursRange!]
  };
  OpeningHoursRange: {
    // root type
    closingTime: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    endDay: number; // Int!
    id: number; // Int!
    openingTime: string; // String!
    startDay: number; // Int!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  PaginatedExhibitions: {
    // root type
    exhibitions?: Array<NexusGenRootTypes['Exhibition'] | null> | null; // [Exhibition]
    hasMore?: boolean | null; // Boolean
  };
  PaginatedGalleries: {
    // root type
    galleries?: NexusGenRootTypes['Gallery'][] | null; // [Gallery!]
    hasMore?: boolean | null; // Boolean
  };
  PaginatedPhotographers: {
    // root type
    hasMore?: boolean | null; // Boolean
    photographers?: NexusGenRootTypes['Photographer'][] | null; // [Photographer!]
  };
  Photographer: {
    // root type
    createdAt: NexusGenScalars['Date']; // Date!
    exhibitions?: NexusGenRootTypes['Exhibition'][] | null; // [Exhibition!]
    firstName?: string | null; // String
    id: string; // String!
    lastName?: string | null; // String
    name?: string | null; // String
    otherNames?: string | null; // String
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    website?: string | null; // String
    websiteUrl?: string | null; // String
  };
  PhotographerQueryResponse: {
    // root type
    error?: string | null; // String
    photographer?: NexusGenRootTypes['Photographer'] | null; // Photographer
  };
  PostalAddress: {
    // root type
    city?: string | null; // String
    country?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    locality?: string | null; // String
    postalCode?: string | null; // String
    streetAddress?: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  Query: {};
  TubeStation: {
    // root type
    createdAt: NexusGenScalars['Date']; // Date!
    galleries?: Array<NexusGenRootTypes['Gallery'] | null> | null; // [Gallery]
    id: string; // String!
    name: string; // String!
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  TubeStationQueryResponse: {
    // root type
    error?: string | null; // String
    tubeStation?: NexusGenRootTypes['TubeStation'] | null; // TubeStation
  };
  User: {
    // root type
    createdAt: NexusGenScalars['Date']; // Date!
    duoRegistered?: boolean | null; // Boolean
    email: string; // String!
    fidoU2fRegistered?: boolean | null; // Boolean
    id: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    username: string; // String!
  };
  UserResponse: {
    // root type
    challenge?: string | null; // String
    errors?: NexusGenRootTypes['FieldError'][] | null; // [FieldError!]
    user?: NexusGenRootTypes['User'] | null; // User
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  CreateExhibitionResponse: {
    // field return type
    errors: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    exhibition: NexusGenRootTypes['Exhibition'] | null; // Exhibition
  };
  CreateGalleryResponse: {
    // field return type
    errors: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    gallery: NexusGenRootTypes['Gallery'] | null; // Gallery
  };
  CreatePhotographerResponse: {
    // field return type
    errors: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    photographer: NexusGenRootTypes['Photographer'] | null; // Photographer
  };
  CreateTubeStationResponse: {
    // field return type
    errors: Array<NexusGenRootTypes['FieldError'] | null> | null; // [FieldError]
    tubeStation: NexusGenRootTypes['TubeStation'] | null; // TubeStation
  };
  DuoAuthDevice: {
    // field return type
    capabilities: Array<string | null> | null; // [String]
    device: string | null; // String
    type: string | null; // String
  };
  DuoEnrollResponse: {
    // field return type
    activationCode: string | null; // String
    error: string | null; // String
    qrCode: string | null; // String
  };
  DuoEnrollStatusResponse: {
    // field return type
    error: string | null; // String
    result: string | null; // String
  };
  DuoPreauthResponse: {
    // field return type
    devices: NexusGenRootTypes['DuoAuthDevice'][] | null; // [DuoAuthDevice!]
    error: string | null; // String
    result: string | null; // String
  };
  Exhibition: {
    // field return type
    bodyText: string | null; // String
    createdAt: string | null; // String
    description: string | null; // String
    end: string | null; // String
    freeEntry: boolean | null; // Boolean
    gallery: NexusGenRootTypes['Gallery'] | null; // Gallery
    hashtags: string[]; // [String!]!
    id: string; // String!
    inPerson: boolean | null; // Boolean
    name: string; // String!
    online: boolean | null; // Boolean
    photographers: Array<NexusGenRootTypes['Photographer'] | null> | null; // [Photographer]
    start: string | null; // String
    summaryText: string | null; // String
    updatedAt: string | null; // String
    url: string | null; // String
  };
  ExhibitionQueryResponse: {
    // field return type
    error: string | null; // String
    exhibition: NexusGenRootTypes['Exhibition'] | null; // Exhibition
  };
  FidoU2fAuthenticateRequest: {
    // field return type
    error: string | null; // String
    labels: Array<string | null> | null; // [String]
    signRequests: NexusGenRootTypes['FidoU2fRequest'][] | null; // [FidoU2fRequest!]
  };
  FidoU2fRegisterRequest: {
    // field return type
    appId: string | null; // String
    challenge: string | null; // String
    version: string | null; // String
  };
  FidoU2fRequest: {
    // field return type
    appId: string; // String!
    challenge: string; // String!
    keyHandle: string | null; // String
    version: string; // String!
  };
  FieldError: {
    // field return type
    field: string; // String!
    message: string; // String!
  };
  Gallery: {
    // field return type
    address: string | null; // String
    byAppointmentOpeningHours: NexusGenRootTypes['OpeningHours'] | null; // OpeningHours
    byAppointmentOpeningTimes: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    exhibitions: NexusGenRootTypes['Exhibition'][] | null; // [Exhibition!]
    id: string; // String!
    location: NexusGenRootTypes['Location'] | null; // Location
    name: string; // String!
    nearestTubes: NexusGenRootTypes['TubeStation'][] | null; // [TubeStation!]
    openStreetMap: string | null; // String
    openingHours: NexusGenRootTypes['OpeningHours'] | null; // OpeningHours
    openingTimes: string | null; // String
    postalAddress: NexusGenRootTypes['PostalAddress'] | null; // PostalAddress
    slug: string; // String!
    tubes: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
    website: string | null; // String
    websiteUrl: string | null; // String
  };
  GalleryQueryResponse: {
    // field return type
    error: string | null; // String
    gallery: NexusGenRootTypes['Gallery'] | null; // Gallery
  };
  Location: {
    // field return type
    latitude: number; // Float!
    longitude: number; // Float!
  };
  Mutation: {
    // field return type
    createExhibition: NexusGenRootTypes['CreateExhibitionResponse']; // CreateExhibitionResponse!
    createGallery: NexusGenRootTypes['CreateGalleryResponse']; // CreateGalleryResponse!
    createPhotographer: NexusGenRootTypes['CreatePhotographerResponse']; // CreatePhotographerResponse!
    createTubeStation: NexusGenRootTypes['CreateTubeStationResponse']; // CreateTubeStationResponse!
    deleteGallery: boolean; // Boolean!
    deleteTubeStation: boolean; // Boolean!
    duoAuth: boolean; // Boolean!
    duoEnroll: NexusGenRootTypes['DuoEnrollResponse']; // DuoEnrollResponse!
    fidoU2fAuthenticate: boolean; // Boolean!
    fidoU2fCompleteAuthentication: boolean; // Boolean!
    fidoU2fRegister: boolean; // Boolean!
    login: NexusGenRootTypes['UserResponse']; // UserResponse!
    logout: boolean; // Boolean!
    register: NexusGenRootTypes['UserResponse']; // UserResponse!
    updateExhibition: NexusGenRootTypes['CreateExhibitionResponse']; // CreateExhibitionResponse!
    updateGallery: NexusGenRootTypes['CreateGalleryResponse']; // CreateGalleryResponse!
    updateTubeStation: NexusGenRootTypes['CreateTubeStationResponse']; // CreateTubeStationResponse!
  };
  OpeningHours: {
    // field return type
    openingHoursRanges: NexusGenRootTypes['OpeningHoursRange'][] | null; // [OpeningHoursRange!]
  };
  OpeningHoursRange: {
    // field return type
    closingTime: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    endDay: number; // Int!
    id: number; // Int!
    openingTime: string; // String!
    startDay: number; // Int!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  PaginatedExhibitions: {
    // field return type
    exhibitions: Array<NexusGenRootTypes['Exhibition'] | null> | null; // [Exhibition]
    hasMore: boolean | null; // Boolean
  };
  PaginatedGalleries: {
    // field return type
    galleries: NexusGenRootTypes['Gallery'][] | null; // [Gallery!]
    hasMore: boolean | null; // Boolean
  };
  PaginatedPhotographers: {
    // field return type
    hasMore: boolean | null; // Boolean
    photographers: NexusGenRootTypes['Photographer'][] | null; // [Photographer!]
  };
  Photographer: {
    // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    exhibitions: NexusGenRootTypes['Exhibition'][] | null; // [Exhibition!]
    firstName: string | null; // String
    id: string; // String!
    lastName: string | null; // String
    name: string | null; // String
    otherNames: string | null; // String
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    website: string | null; // String
    websiteUrl: string | null; // String
  };
  PhotographerQueryResponse: {
    // field return type
    error: string | null; // String
    photographer: NexusGenRootTypes['Photographer'] | null; // Photographer
  };
  PostalAddress: {
    // field return type
    city: string | null; // String
    country: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    locality: string | null; // String
    postalCode: string | null; // String
    streetAddress: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  Query: {
    // field return type
    duoCheck: boolean; // Boolean!
    duoEnrollStatus: NexusGenRootTypes['DuoEnrollStatusResponse']; // DuoEnrollStatusResponse!
    duoPing: boolean | null; // Boolean
    duoPreauth: NexusGenRootTypes['DuoPreauthResponse']; // DuoPreauthResponse!
    email: string; // String!
    exhibition: NexusGenRootTypes['ExhibitionQueryResponse']; // ExhibitionQueryResponse!
    exhibitions: NexusGenRootTypes['PaginatedExhibitions']; // PaginatedExhibitions!
    fidoU2fBeginAuthenticate: NexusGenRootTypes['FidoU2fAuthenticateRequest']; // FidoU2fAuthenticateRequest!
    fidoU2fBeginRegister: NexusGenRootTypes['FidoU2fRegisterRequest'] | null; // FidoU2fRegisterRequest
    galleries: NexusGenRootTypes['PaginatedGalleries']; // PaginatedGalleries!
    gallery: NexusGenRootTypes['GalleryQueryResponse']; // GalleryQueryResponse!
    hello: string | null; // String
    me: NexusGenRootTypes['User'] | null; // User
    photographer: NexusGenRootTypes['PhotographerQueryResponse']; // PhotographerQueryResponse!
    photographers: NexusGenRootTypes['PaginatedPhotographers']; // PaginatedPhotographers!
    tubeStation: NexusGenRootTypes['TubeStationQueryResponse']; // TubeStationQueryResponse!
    tubeStations: Array<NexusGenRootTypes['TubeStation'] | null>; // [TubeStation]!
  };
  TubeStation: {
    // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    galleries: Array<NexusGenRootTypes['Gallery'] | null> | null; // [Gallery]
    id: string; // String!
    name: string; // String!
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  TubeStationQueryResponse: {
    // field return type
    error: string | null; // String
    tubeStation: NexusGenRootTypes['TubeStation'] | null; // TubeStation
  };
  User: {
    // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    duoRegistered: boolean | null; // Boolean
    email: string; // String!
    fidoU2fRegistered: boolean | null; // Boolean
    id: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    username: string; // String!
  };
  UserResponse: {
    // field return type
    challenge: string | null; // String
    errors: NexusGenRootTypes['FieldError'][] | null; // [FieldError!]
    user: NexusGenRootTypes['User'] | null; // User
  };
}

export interface NexusGenFieldTypeNames {
  CreateExhibitionResponse: {
    // field return type name
    errors: 'FieldError';
    exhibition: 'Exhibition';
  };
  CreateGalleryResponse: {
    // field return type name
    errors: 'FieldError';
    gallery: 'Gallery';
  };
  CreatePhotographerResponse: {
    // field return type name
    errors: 'FieldError';
    photographer: 'Photographer';
  };
  CreateTubeStationResponse: {
    // field return type name
    errors: 'FieldError';
    tubeStation: 'TubeStation';
  };
  DuoAuthDevice: {
    // field return type name
    capabilities: 'String';
    device: 'String';
    type: 'String';
  };
  DuoEnrollResponse: {
    // field return type name
    activationCode: 'String';
    error: 'String';
    qrCode: 'String';
  };
  DuoEnrollStatusResponse: {
    // field return type name
    error: 'String';
    result: 'String';
  };
  DuoPreauthResponse: {
    // field return type name
    devices: 'DuoAuthDevice';
    error: 'String';
    result: 'String';
  };
  Exhibition: {
    // field return type name
    bodyText: 'String';
    createdAt: 'String';
    description: 'String';
    end: 'String';
    freeEntry: 'Boolean';
    gallery: 'Gallery';
    hashtags: 'String';
    id: 'String';
    inPerson: 'Boolean';
    name: 'String';
    online: 'Boolean';
    photographers: 'Photographer';
    start: 'String';
    summaryText: 'String';
    updatedAt: 'String';
    url: 'String';
  };
  ExhibitionQueryResponse: {
    // field return type name
    error: 'String';
    exhibition: 'Exhibition';
  };
  FidoU2fAuthenticateRequest: {
    // field return type name
    error: 'String';
    labels: 'String';
    signRequests: 'FidoU2fRequest';
  };
  FidoU2fRegisterRequest: {
    // field return type name
    appId: 'String';
    challenge: 'String';
    version: 'String';
  };
  FidoU2fRequest: {
    // field return type name
    appId: 'String';
    challenge: 'String';
    keyHandle: 'String';
    version: 'String';
  };
  FieldError: {
    // field return type name
    field: 'String';
    message: 'String';
  };
  Gallery: {
    // field return type name
    address: 'String';
    byAppointmentOpeningHours: 'OpeningHours';
    byAppointmentOpeningTimes: 'String';
    createdAt: 'Date';
    exhibitions: 'Exhibition';
    id: 'String';
    location: 'Location';
    name: 'String';
    nearestTubes: 'TubeStation';
    openStreetMap: 'String';
    openingHours: 'OpeningHours';
    openingTimes: 'String';
    postalAddress: 'PostalAddress';
    slug: 'String';
    tubes: 'String';
    updatedAt: 'Date';
    website: 'String';
    websiteUrl: 'String';
  };
  GalleryQueryResponse: {
    // field return type name
    error: 'String';
    gallery: 'Gallery';
  };
  Location: {
    // field return type name
    latitude: 'Float';
    longitude: 'Float';
  };
  Mutation: {
    // field return type name
    createExhibition: 'CreateExhibitionResponse';
    createGallery: 'CreateGalleryResponse';
    createPhotographer: 'CreatePhotographerResponse';
    createTubeStation: 'CreateTubeStationResponse';
    deleteGallery: 'Boolean';
    deleteTubeStation: 'Boolean';
    duoAuth: 'Boolean';
    duoEnroll: 'DuoEnrollResponse';
    fidoU2fAuthenticate: 'Boolean';
    fidoU2fCompleteAuthentication: 'Boolean';
    fidoU2fRegister: 'Boolean';
    login: 'UserResponse';
    logout: 'Boolean';
    register: 'UserResponse';
    updateExhibition: 'CreateExhibitionResponse';
    updateGallery: 'CreateGalleryResponse';
    updateTubeStation: 'CreateTubeStationResponse';
  };
  OpeningHours: {
    // field return type name
    openingHoursRanges: 'OpeningHoursRange';
  };
  OpeningHoursRange: {
    // field return type name
    closingTime: 'String';
    createdAt: 'Date';
    endDay: 'Int';
    id: 'Int';
    openingTime: 'String';
    startDay: 'Int';
    updatedAt: 'Date';
  };
  PaginatedExhibitions: {
    // field return type name
    exhibitions: 'Exhibition';
    hasMore: 'Boolean';
  };
  PaginatedGalleries: {
    // field return type name
    galleries: 'Gallery';
    hasMore: 'Boolean';
  };
  PaginatedPhotographers: {
    // field return type name
    hasMore: 'Boolean';
    photographers: 'Photographer';
  };
  Photographer: {
    // field return type name
    createdAt: 'Date';
    exhibitions: 'Exhibition';
    firstName: 'String';
    id: 'String';
    lastName: 'String';
    name: 'String';
    otherNames: 'String';
    slug: 'String';
    updatedAt: 'Date';
    website: 'String';
    websiteUrl: 'String';
  };
  PhotographerQueryResponse: {
    // field return type name
    error: 'String';
    photographer: 'Photographer';
  };
  PostalAddress: {
    // field return type name
    city: 'String';
    country: 'String';
    createdAt: 'Date';
    id: 'Int';
    locality: 'String';
    postalCode: 'String';
    streetAddress: 'String';
    updatedAt: 'Date';
  };
  Query: {
    // field return type name
    duoCheck: 'Boolean';
    duoEnrollStatus: 'DuoEnrollStatusResponse';
    duoPing: 'Boolean';
    duoPreauth: 'DuoPreauthResponse';
    email: 'String';
    exhibition: 'ExhibitionQueryResponse';
    exhibitions: 'PaginatedExhibitions';
    fidoU2fBeginAuthenticate: 'FidoU2fAuthenticateRequest';
    fidoU2fBeginRegister: 'FidoU2fRegisterRequest';
    galleries: 'PaginatedGalleries';
    gallery: 'GalleryQueryResponse';
    hello: 'String';
    me: 'User';
    photographer: 'PhotographerQueryResponse';
    photographers: 'PaginatedPhotographers';
    tubeStation: 'TubeStationQueryResponse';
    tubeStations: 'TubeStation';
  };
  TubeStation: {
    // field return type name
    createdAt: 'Date';
    galleries: 'Gallery';
    id: 'String';
    name: 'String';
    slug: 'String';
    updatedAt: 'Date';
  };
  TubeStationQueryResponse: {
    // field return type name
    error: 'String';
    tubeStation: 'TubeStation';
  };
  User: {
    // field return type name
    createdAt: 'Date';
    duoRegistered: 'Boolean';
    email: 'String';
    fidoU2fRegistered: 'Boolean';
    id: 'String';
    updatedAt: 'Date';
    username: 'String';
  };
  UserResponse: {
    // field return type name
    challenge: 'String';
    errors: 'FieldError';
    user: 'User';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createExhibition: {
      // args
      input: NexusGenInputs['CreateExhibitionInput']; // CreateExhibitionInput!
    };
    createGallery: {
      // args
      input: NexusGenInputs['CreateGalleryInput']; // CreateGalleryInput!
    };
    createPhotographer: {
      // args
      input: NexusGenInputs['CreatePhotographerInput']; // CreatePhotographerInput!
    };
    createTubeStation: {
      // args
      input: NexusGenInputs['CreateTubeStationInput']; // CreateTubeStationInput!
    };
    deleteGallery: {
      // args
      id: string; // String!
    };
    deleteTubeStation: {
      // args
      id: string; // String!
    };
    duoAuth: {
      // args
      device: string; // String!
    };
    fidoU2fAuthenticate: {
      // args
      registerInput: NexusGenInputs['FidoU2fRegisterInput']; // FidoU2fRegisterInput!
    };
    fidoU2fCompleteAuthentication: {
      // args
      signData: NexusGenInputs['FidoU2fSignResponseInput']; // FidoU2fSignResponseInput!
    };
    fidoU2fRegister: {
      // args
      registerInput: NexusGenInputs['FidoU2fRegisterInput']; // FidoU2fRegisterInput!
    };
    login: {
      // args
      credentials: NexusGenInputs['LoginInput']; // LoginInput!
    };
    register: {
      // args
      registerInput: NexusGenInputs['UsernameEmailPasswordInput']; // UsernameEmailPasswordInput!
    };
    updateExhibition: {
      // args
      input: NexusGenInputs['UpdateExhibitionInput']; // UpdateExhibitionInput!
    };
    updateGallery: {
      // args
      input: NexusGenInputs['UpdateGalleryInput']; // UpdateGalleryInput!
    };
    updateTubeStation: {
      // args
      input: NexusGenInputs['UpdateTubeStationInput']; // UpdateTubeStationInput!
    };
  };
  Query: {
    duoEnrollStatus: {
      // args
      activationCode: string; // String!
    };
    exhibition: {
      // args
      id: string; // String!
    };
    gallery: {
      // args
      slug: string; // String!
    };
    photographer: {
      // args
      slug: string; // String!
    };
    tubeStation: {
      // args
      slug: string; // String!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
