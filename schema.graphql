### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddressInput {
  city: String
  country: String
  locality: String
  postalCode: String
  streetAddress: String
}

input CreateExhibitionInput {
  bodyText: String
  description: String!
  end: String!
  freeEntry: Boolean!
  gallery: String!
  hashtags: [String!]!
  inPerson: Boolean!
  name: String!
  online: Boolean!
  start: String!
  summaryText: String!
  url: String
}

type CreateExhibitionResponse {
  errors: [FieldError]
  exhibition: Exhibition
}

input CreateGalleryInput {
  googleMap: String!
  name: String!
  nearestTubes: [String!]!
  openStreetMapUrl: String
  openingHours: OpeningHoursInput!
  postalAddress: AddressInput!
  slug: String!
  website: String!
}

type CreateGalleryResponse {
  errors: [FieldError!]
  gallery: Gallery!
}

input CreatePhotographerInput {
  firstName: String
  lastName: String
  otherNames: String
  slug: String!
  website: String
}

type CreatePhotographerResponse {
  errors: FieldError!
  photographer: Photographer!
}

input CreateTubeStationInput {
  name: String!
  slug: String!
}

type CreateTubeStationResponse {
  errors: [FieldError!]
  tubeStation: TubeStation!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Exhibition {
  bodyText: String
  createdAt: String
  description: String
  end: String
  freeEntry: Boolean
  gallery: Gallery
  hashtags: [String!]!
  id: String!
  inPerson: Boolean
  name: String!
  online: Boolean
  photographers: [Photographer!]
  start: String
  summaryText: String
  updatedAt: String
  url: String
}

type ExhibitionQueryResponse {
  error: String
  exhibition: Exhibition
}

type FieldError {
  field: String!
  message: String!
}

type Gallery {
  address: String
  byAppointmentOpeningHours: OpeningHours!
  byAppointmentOpeningTimes: String
  createdAt: Date!
  exhibitions: [Exhibition!]
  googleMap: String
  id: String!
  location: Location!
  name: String!
  nearestTubes: [TubeStation!]
  openStreetMap: String
  openingHours: OpeningHours!
  openingTimes: String
  postalAddress: PostalAddress!
  slug: String!
  tubes: String
  website: String
  websiteUrl: String
}

type GalleryQueryResponse {
  error: String
  galleries: [Gallery!]
}

type Location {
  latitude: Float!
  longitude: Float!
}

type Mutation {
  createExhibition(input: CreateExhibitionInput!): CreateExhibitionResponse!
  createGallery(input: CreateGalleryInput!): CreateGalleryResponse!
  createPhotographer(input: CreatePhotographerInput!): CreatePhotographerResponse!
  createTubeStation(input: CreateTubeStationInput!): CreateTubeStationResponse!
  deleteGallery(id: String!): Boolean!
  deleteTubeStation(id: String!): Boolean!
  updateExhibition(input: UpdateExhibitionInput!): CreateExhibitionResponse!
  updateGallery(input: UpdateGalleryInput!): CreateGalleryResponse!
  updateTubeStation(input: UpdateTubeStationInput!): CreateTubeStationResponse!
}

type OpeningHours {
  openingHoursRanges: [OpeningHoursRange!]!
}

input OpeningHoursInput {
  openingHoursRanges: [OpeningHoursRangeInput!]!
}

type OpeningHoursRange {
  closingTime: String
  createdAt: Date!
  endDay: String
  id: Int!
  openingTime: String
  startDay: String
  updatedAt: Date!
}

input OpeningHoursRangeInput {
  closingTime: Int!
  endDay: Int!
  openingTime: Int!
  startDay: Int!
}

type PaginatedExhibitions {
  exhibitions: [Exhibition]
  hasMore: Boolean
}

type PaginatedGalleries {
  galleries: [Gallery!]
  hasMore: Boolean
}

type PaginatedPhotographers {
  hasMore: Boolean
  photographers: [Photographer!]
}

type Photographer {
  createdAt: Date!
  exhibitions: [Exhibition!]
  firstName: String
  id: Int!
  lastName: String
  name: String
  otherNames: String
  slug: String!
  updatedAt: Date!
  website: String
  websiteUrl: String
}

type PhotographerQueryResponse {
  error: String
  photographer: Photographer!
}

type PostalAddress {
  city: String
  country: String
  createdAt: Date!
  locality: String
  postalCode: String
  streetAddress: String
  string: ID!
  updatedAt: Date!
}

type Query {
  exhibition(id: String!): ExhibitionQueryResponse!
  exhibitions: PaginatedExhibitions!
  galleries: PaginatedGalleries!
  gallery(slug: String!): GalleryQueryResponse!
  hello: String
  photographer(slug: String!): PhotographerQueryResponse!
  photographers: PaginatedPhotographers!
  tubeStation(slug: String!): TubeStationQueryResponse!
  tubeStations: [TubeStation]!
}

type TubeStation {
  createdAt: Date!
  galleries: [Gallery!]!
  id: Int!
  name: String!
  slug: String!
  updatedAt: Date!
}

type TubeStationQueryResponse {
  error: String
  tubeStation: TubeStation!
}

input UpdateExhibitionInput {
  addPhotographers: [String!]!
  bodyText: String
  id: String!
  name: String
  removePhotographers: [String!]!
  summaryText: String
  url: String
}

input UpdateGalleryInput {
  addNearestTubes: [String!]
  id: String!
  name: String
  openStreetMapUrl: String
  postalAddress: AddressInput!
  removeNearestTubes: [String!]
  replacementByAppointmentOpeningHours: OpeningHoursInput!
  replacementOpeningHours: OpeningHoursInput!
  slug: String
  website: String
}

input UpdateTubeStationInput {
  id: String!
  name: String
  slug: String
}